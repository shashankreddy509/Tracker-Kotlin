job_config: &job_config
  working_directory: ~/workspace
  docker:
    - image: cimg/android:2023.04.1
# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
# For a detailed guide to building and testing on Android, read the docs:
# https://circleci.com/docs/2.0/language-android/ for more details.
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  android: circleci/android@1.0.3

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  code style:
    <<: *job_config
    environment:
      GRADLE_OPTS: -Xmx1g
    resource_class: medium+
    steps:
      - checkout
      - run:
          name: Perform code style check
          command: ./gradlew ktlintcheck

  build:
    <<: *job_config
    resource_class: medium+
    environment:
      GRADLE_OPTS: -Dkotlin.compiler.execution.strategy=in-process
    steps:
      - checkout

      - run:
          name: Assemble release build
          command: ./gradlew assembleRelease

  unit test:
    <<: *job_config
    resource_class: large
    environment:
      GRADLE_OPTS: -Dkotlin.compiler.execution.strategy=in-process

    steps:
      - checkout

      - run: ./gradlew test --stacktrace --max-workers 3

      # - run: ./gradlew jacocoTestReport
      # - run: ./gradlew jacocoUnitTestReport

  lint:
    <<: *job_config
    resource_class: large
    environment:
      GRADLE_OPTS: -Dkotlin.compiler.execution.strategy=in-process
    steps:
      - checkout
      - run: ./gradlew lint

  build ui test:
    <<: *job_config
    resource_class: large
    environment:
      GRADLE_OPTS: -Xmx5g
    steps:
      - checkout
      - run:
          name: Build Dev and Test APKs
          command:
            ./gradlew :app:assembleDebug :app:assembleDebugAndroidTest -PisTestCoverageEnabled --stacktrace

  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define the Android machine image executor.
    # See: https://circleci.com/docs/2.0/executor-types/
    executor:
      name: android/android-machine

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout

      # The next step will run the unit tests
      - android/run-tests:
          test-command: ./gradlew lint testDebug --continue

      # Then start the emulator and run the Instrumentation tests!
      - android/start-emulator-and-run-tests:
          test-command: ./gradlew connectedDebugAndroidTest
          system-image: system-images;android-29;google_apis;x86

      # And finally run the release build
      - run:
          name: Assemble release build
          command: |
            ./gradlew assembleRelease

workflows:
  Test and Build:
    jobs:
      - code style
      - build
      - lint
      - unit test
      - build ui test
